diff --git a/node_modules/svelte/compiler.js b/node_modules/svelte/compiler.js
index 23c90b5..38586fd 100644
--- a/node_modules/svelte/compiler.js
+++ b/node_modules/svelte/compiler.js
@@ -21484,6 +21484,7 @@
 	                        change_object = value_object;
 	                    }
 	                    else {
+	                        name === 'class' && component.stylesheet.apply(this.node);
 	                        const obj = x `{ ${name}: ${attr.get_value(block)} }`;
 	                        initial_props.push(obj);
 	                        change_object = obj;
@@ -25756,6 +25757,7 @@
 	        this.bindings = [];
 	        this.handlers = [];
 	        this.lets = [];
+	        this.classes = [];
 	        if (info.name !== 'svelte:component' && info.name !== 'svelte:self') {
 	            const name = info.name.split('.')[0]; // accommodate namespaces
 	            component.warn_if_undefined(name, info, scope);
@@ -25866,10 +25868,25 @@
 	            });
 	        }
 	        this.children = map_children(component, this, this.scope, children);
+	        component.stylesheet.apply(this);
 	    }
 	    get slot_template_name() {
 	        return this.attributes.find(attribute => attribute.name === 'slot').get_static_value();
 	    }
+	    add_css_class(id = this.component.stylesheet.id) {
+	        const class_attribute = this.attributes.find(a => a.name === 'class');
+	        if (class_attribute && !class_attribute.is_true) {
+	            if (class_attribute.chunks.length === 1 && class_attribute.chunks[0].type === 'Text') {
+	                class_attribute.chunks[0].data += ` ${id}`;
+	            }
+	            else {
+	                class_attribute.chunks.push(new Text$1(this.component, this, this.scope, {
+	                    type: 'Text',
+	                    data: ` ${id}`
+	                }));
+	            }
+	        }
+	    }
 	}
 	function not_whitespace_text(node) {
 	    return !(node.type === 'Text' && /^\s+$/.test(node.data));
